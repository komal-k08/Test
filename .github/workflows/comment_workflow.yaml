name: Comment Artifacts on PR

on:
  workflow_run:
    workflows: [ "Upload Artifacts" ]
    types: [ completed ]

permissions:
  pull-requests: write
  contents: read

jobs:
  comment:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event == 'pull_request' }}
    steps:
      - name: Fetch and download workflow-info artifact
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Fetch artifacts list to get the artifact ID
          ARTIFACTS=$(gh api -H "Accept: application/vnd.github+json" \
            "repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}/artifacts" \
            | jq -r '.artifacts[] | select(.name == "workflow-info")')
          ARTIFACT_ID=$(echo "$ARTIFACTS" | jq -r '.id')
          if [ -z "$ARTIFACT_ID" ]; then
            echo "workflow-info artifact not found."
            exit 1
          fi
          echo "Found workflow-info artifact with ID: $ARTIFACT_ID"

          # Download the artifact ZIP file using redirection
          mkdir -p ./workflow-info
          gh api -H "Accept: application/vnd.github+json" \
            "repos/${{ github.repository }}/actions/artifacts/$ARTIFACT_ID/zip" \
            > ./workflow-info/workflow-info.zip

          # Unzip the artifact
          unzip ./workflow-info/workflow-info.zip -d ./workflow-info/
          rm ./workflow-info/workflow-info.zip

          # Debug: List downloaded files
          echo "Downloaded files:"
          ls -la ./workflow-info/
          cat ./workflow-info/workflow-info.json || echo "Failed to read workflow-info.json"

      - name: Delete old comments and post new one
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const runId = ${{ github.event.workflow_run.id }};

            // Read the PR number from the downloaded artifact
            const workflowInfo = JSON.parse(fs.readFileSync('./workflow-info/workflow-info.json', 'utf8'));
            const prNumber = workflowInfo.pr_number;

            if (!prNumber || prNumber === 'null') {
              console.log("No valid PR number found in workflow-info.json. Skipping.");
              return;
            }

            // Fetch existing comments to delete old ones
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: Number(prNumber),
            });
            const oldComments = comments.data.filter(comment => 
              comment.body.startsWith("âœ… Artifacts uploaded!")
            );
            for (const comment of oldComments) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id,
              });
              console.log(`Deleted old comment ID: ${comment.id}`);
            }

            // Fetch artifacts for the workflow run
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: Number(runId),
            });

            // Find the two artifacts
            const artifact1 = artifacts.data.artifacts.find(a => a.name === 'quick-test-1');
            const artifact2 = artifacts.data.artifacts.find(a => a.name === 'quick-test-2');
            if (!artifact1 || !artifact2) {
              console.log("One or both artifacts ('quick-test-1', 'quick-test-2') not found.");
              return;
            }

            // Construct artifact download URLs
            const artifactUrl1 = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${runId}/artifacts/${artifact1.id}`;
            const artifactUrl2 = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${runId}/artifacts/${artifact2.id}`;

            // Post the updated comment
            const commentBody = `âœ… Artifacts uploaded!  
            - ðŸ“„ [Download quick-test-1](${artifactUrl1})  
            - ðŸ“„ [Download quick-test-2](${artifactUrl2})`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: Number(prNumber),
              body: commentBody
            });
            console.log("Posted new comment with artifact links.");